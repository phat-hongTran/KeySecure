<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dawn.Guard</name>
    </assembly>
    <members>
        <member name="T:Dawn.Guard">
            <summary>Validates argument preconditions.</summary>
            <content>Contains the argument initialization methods.</content>
            <content>Provides preconditions for <see cref="T:System.Boolean" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.DateTime" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.Double" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.Net.Mail.MailAddress" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.Enum" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.Enum" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.IEquatable`1" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.IComparable" /> arguments.</content>
            <content>Provides preconditions for <see cref="T:System.Collections.IEnumerable" /> arguments.</content>
            <content>Provides utilities to support legacy frameworks.</content>
            <content>Provides routed member preconditions.</content>
            <content>Provides error messages for the common preconditions.</content>
            <content>Provides safe modification functions to normalize arguments.</content>
            <content>Nullability preconditions.</content>
            <content>Provides generic preconditions.</content>
            <content>Provides scoping support.</content>
            <content>Provides preconditions for <see cref="T:System.Single" /> arguments.</content>
            <content>Provides state preconditions.</content>
            <content>Provides preconditions for <see cref="T:System.String" /> arguments.</content>
            <content>Provides type preconditions.</content>
            <content>Provides preconditions for <see cref="T:System.Uri" /> arguments.</content>
        </member>
        <member name="M:Dawn.Guard.Argument``1(``0,System.String,System.Boolean)">
            <summary>
                Returns an object that can be used to assert preconditions for the method argument
                with the specified name and value.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <param name="value">The value of the method argument.</param>
            <param name="name">
                <para>
                    The name of the method argument. Use the <c>nameof</c> operator ( <c>Nameof</c>
                    in Visual Basic) where possible.
                </para>
                <para>
                    It is highly recommended you don't left this value <c>null</c> so the arguments
                    violating the preconditions can be easily identified.
                </para>
            </param>
            <param name="secure">
                Pass <c>true</c> for the validation parameters to be excluded from the exception
                messages of failed validations.
            </param>
            <returns>An object used for asserting preconditions.</returns>
        </member>
        <member name="M:Dawn.Guard.Argument``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
                Returns an object that can be used to assert preconditions for the specified method argument.
            </summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <param name="e">An expression that specifies a method argument.</param>
            <param name="secure">
                Pass <c>true</c> for the validation parameters to be excluded from the exception
                messages of failed validations.
            </param>
            <returns>An object used for asserting preconditions.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="e" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="e" /> is not a <see cref="T:System.Linq.Expressions.MemberExpression" />.</exception>
        </member>
        <member name="M:Dawn.Guard.Fail(System.Exception)">
            <summary>Invokes the current scope's exception interceptor on precondition failures.</summary>
            <param name="exception">The exception to intercept.</param>
            <returns><paramref name="exception" />.</returns>
        </member>
        <member name="T:Dawn.Guard.ArgumentInfo`1">
            <summary>Represents a method argument.</summary>
            <typeparam name="T">The type of the method argument.</typeparam>
            <content>Contains the predicate preconditions.</content>
            <content>Contains the compatibility preconditions.</content>
        </member>
        <member name="F:Dawn.Guard.ArgumentInfo`1.DefaultName">
            <summary>The default name for the arguments of type <typeparamref name="T" />.</summary>
        </member>
        <member name="F:Dawn.Guard.ArgumentInfo`1._name">
            <summary>The argument name.</summary>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.#ctor(`0,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Dawn.Guard.ArgumentInfo`1" /> struct.
            </summary>
            <param name="value">The value of the method argument.</param>
            <param name="name">The name of the method argument.</param>
            <param name="modified">
                Whether the original method argument is modified before the initialization of
                this instance.
            </param>
            <param name="secure">
                Pass <c>true</c> for the validation parameters to be excluded from the exception
                messages of failed validations.
            </param>
        </member>
        <member name="P:Dawn.Guard.ArgumentInfo`1.Value">
            <summary>Gets the argument value.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentInfo`1.Name">
            <summary>Gets the argument name.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentInfo`1.Modified">
            <summary>
                Gets a value indicating whether the original method argument is modified before
                the initialization of this instance.
            </summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentInfo`1.Secure">
            <summary>
                Gets a value indicating whether sensitive information may be used to validate the
                argument. If <c>true</c>, exception messages provide less information about the
                validation parameters.
            </summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentInfo`1.DebuggerDisplay">
            <summary>Gets how the layout is displayed in the debugger variable windows.</summary>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.op_Implicit(Dawn.Guard.ArgumentInfo{`0})~`0">
            <summary>Gets the value of an argument.</summary>
            <param name="argument">The argument whose value to return.</param>
            <returns><see cref="P:Dawn.Guard.ArgumentInfo`1.Value" />.</returns>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.HasValue">
            <summary>Determines whether the argument value is not <c>null</c>.</summary>
            <returns>
                <c>true</c>, if <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" /> is not <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.IsNull">
            <summary>Determines whether the argument value is <c>null</c>.</summary>
            <returns>
                <c>true</c>, if <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" /> is <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.ToString">
            <summary>Returns the string representation of the argument value.</summary>
            <returns>String representation of the argument value.</returns>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Require(System.Boolean,System.Func{`0,System.String})">
            <summary>Requires the argument to satisfy a condition.</summary>
            <param name="condition">Whether the precondition is satisfied.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="condition" /> is <c>false</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Require``1(System.Boolean,System.Func{`0,System.String})">
            <summary>
                Requires the argument to satisfy a condition and throws the specified type of
                exception if the condition is not met.
            </summary>
            <typeparam name="TException">
                The type of the exception to throw if the argument does not satisfy the specified condition.
            </typeparam>
            <param name="condition">Whether the precondition is satisfied.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.Exception">
                <paramref name="condition" /> is <c>false</c>. The exception thrown is an
                instance of type <typeparamref name="TException" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Require(System.Func{`0,System.Boolean},System.Func{`0,System.String})">
            <summary>Requires the argument to satisfy a condition.</summary>
            <param name="predicate">The function to test the argument value.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="predicate" /> returned <c>false</c> when supplied the <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Require``1(System.Func{`0,System.Boolean},System.Func{`0,System.String})">
            <summary>
                Requires the argument to satisfy a condition and throws the specified type of
                exception if the condition is not met.
            </summary>
            <typeparam name="TException">
                The type of the exception to throw if the argument does not satisfy the specified condition.
            </typeparam>
            <param name="predicate">The function to test the argument value.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.Exception">
                <paramref name="predicate" /> returned <c>false</c> when supplied the
                <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" />. The exception thrown is an instance of type <typeparamref name="TException" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Compatible``1(System.Func{`0,System.String})">
            <summary>
                Requires the argument to have a value that can be assigned to an instance of the
                specified type.
            </summary>
            <typeparam name="TTarget">
                The type that the argument's value should be assignable to.
            </typeparam>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" /> cannot be assigned to type <typeparamref name="TTarget" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.NotCompatible``1(System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a value that cannot be assigned to an instance of
                the specified type.
            </summary>
            <typeparam name="TTarget">
                The type that the argument's value should not be assignable to.
            </typeparam>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current argument.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" /> can be assigned to type <typeparamref name="TTarget" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ArgumentInfo`1.Cast``1(System.Func{`0,System.String})">
            <summary>
                <para>
                    Requires the argument to have a value that can be assigned to an instance of
                    the specified type.
                </para>
                <para>The return value will be a new argument of type <typeparamref name="TTarget" />.</para>
            </summary>
            <typeparam name="TTarget">
                The type that the argument's value should be assignable to.
            </typeparam>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.ArgumentInfo`1.Value" /> cannot be assigned to type <typeparamref name="TTarget" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.True(Dawn.Guard.ArgumentInfo{System.Boolean}@,System.String)">
            <summary>Requires the boolean argument to be <c>true</c>.</summary>
            <param name="argument">The boolean argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> value is <c>false</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.True(Dawn.Guard.ArgumentInfo{System.Nullable{System.Boolean}}@,System.String)">
            <summary>Requires the nullable boolean argument to be <c>true</c> or <c>null</c>.</summary>
            <param name="argument">The boolean argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> value is <c>false</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.False(Dawn.Guard.ArgumentInfo{System.Boolean}@,System.String)">
            <summary>Requires the boolean argument to be <c>false</c>.</summary>
            <param name="argument">The boolean argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> value is <c>true</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.False(Dawn.Guard.ArgumentInfo{System.Nullable{System.Boolean}}@,System.String)">
            <summary>Requires the nullable boolean argument to be <c>false</c> or <c>null</c>.</summary>
            <param name="argument">The boolean argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> value is <c>true</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.KindSpecified(Dawn.Guard.ArgumentInfo{System.DateTime}@,System.Func{System.DateTime,System.String})">
            <summary>
                Requires the date-time argument to have its <see cref="P:System.DateTime.Kind" /> specified,
                i.e. not to have it as <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" />'s <see cref="P:System.DateTime.Kind" /> property is
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.KindSpecified(Dawn.Guard.ArgumentInfo{System.Nullable{System.DateTime}}@,System.Func{System.DateTime,System.String})">
            <summary>
                Requires the date-time argument to either be <c>null</c> or have its
                <see cref="P:System.DateTime.Kind" /> specified, i.e. not to have it as
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" />'s <see cref="P:System.DateTime.Kind" /> property is
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.KindUnspecified(Dawn.Guard.ArgumentInfo{System.DateTime}@,System.Func{System.DateTime,System.String})">
            <summary>
                Requires the date-time argument not to have its <see cref="P:System.DateTime.Kind" />
                specified, i.e. to have it as <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" />'s <see cref="P:System.DateTime.Kind" /> property is not
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.KindUnspecified(Dawn.Guard.ArgumentInfo{System.Nullable{System.DateTime}}@,System.Func{System.DateTime,System.String})">
            <summary>
                Requires the date-time argument either to be <c>null</c> or not to have its
                <see cref="P:System.DateTime.Kind" /> specified, i.e. to have it as
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" />'s <see cref="P:System.DateTime.Kind" /> property is not
                <see cref="F:System.DateTimeKind.Unspecified" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NaN(Dawn.Guard.ArgumentInfo{System.Double}@,System.Func{System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is "not a
                number" ( <see cref="F:System.Double.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.NaN" />, and the argument
                is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.NaN" />, and the argument
                is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NaN(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Func{System.Nullable{System.Double},System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is either
                <c>null</c> or "not a number" ( <see cref="F:System.Double.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.NaN" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.NaN" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNaN(Dawn.Guard.ArgumentInfo{System.Double}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                "not a number" ( <see cref="F:System.Double.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NaN" />, and the argument is
                not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NaN" />, and the argument is
                modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNaN(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                "not a number" ( <see cref="F:System.Double.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NaN" />, and the argument is
                not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NaN" />, and the argument is
                modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Infinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.Func{System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is either
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) or negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <see cref="F:System.Double.PositiveInfinity" />
                nor <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <see cref="F:System.Double.PositiveInfinity" />
                nor <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Infinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Func{System.Nullable{System.Double},System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is
                <c>null</c>, positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) or negative
                infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <c>null</c>, not
                <see cref="F:System.Double.PositiveInfinity" /> and not
                <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c>, not
                <see cref="F:System.Double.PositiveInfinity" /> and not
                <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.Func{System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Func{System.Nullable{System.Double},System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Double.PositiveInfinity" />
                or <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.PositiveInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.Func{System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.PositiveInfinity" />, and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.PositiveInfinity" />, and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.PositiveInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Func{System.Nullable{System.Double},System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is either
                <c>null</c> or positive infinity ( <see cref="F:System.Double.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.PositiveInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.PositiveInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotPositiveInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.PositiveInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.PositiveInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotPositiveInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                positive infinity ( <see cref="F:System.Double.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.PositiveInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.PositiveInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NegativeInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.Func{System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is
                negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.NegativeInfinity" />, and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Double.NegativeInfinity" />, and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NegativeInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Func{System.Nullable{System.Double},System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is either
                <c>null</c> or negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Double.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNegativeInfinity(Dawn.Guard.ArgumentInfo{System.Double}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NegativeInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NegativeInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNegativeInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.String)">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                negative infinity ( <see cref="F:System.Double.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NegativeInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Double.NegativeInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal(Dawn.Guard.ArgumentInfo{System.Double}@,System.Double,System.Double,System.Func{System.Double,System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is within
                the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required accuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different from <paramref name="other" /> by
                more than <paramref name="delta" />
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Double,System.Double,System.Func{System.Double,System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is either
                <c>null</c>, or within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required accuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different from <paramref name="other" /> by
                more than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual(Dawn.Guard.ArgumentInfo{System.Double}@,System.Double,System.Double,System.Func{System.Double,System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that is not
                within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required inaccuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> or different
                from it by less than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual(Dawn.Guard.ArgumentInfo{System.Nullable{System.Double}}@,System.Double,System.Double,System.Func{System.Double,System.Double,System.String})">
            <summary>
                Requires the double-precision floating-point argument to have a value that either is
                <c>null</c> or is not within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required inaccuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> or different
                from it by less than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HasHost(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,System.String,System.Func{System.Net.Mail.MailAddress,System.String,System.String})">
            <summary>Requires the argument value to have the specified host.</summary>
            <param name="argument">The email address argument.</param>
            <param name="host">The host that the argument value is required to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value's host is not <paramref name="host" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotHaveHost(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,System.String,System.Func{System.Net.Mail.MailAddress,System.String,System.String})">
            <summary>Requires the argument value to not have the specified host.</summary>
            <param name="argument">The email address argument.</param>
            <param name="host">The host that the argument value is required not to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value's host is <paramref name="host" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HostIn``1(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,``0,System.Func{System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>Requires the argument value to have one of the specified hosts.</summary>
            <typeparam name="TCollection">The type of the hosts collection.</typeparam>
            <param name="argument">The email address argument.</param>
            <param name="hosts">The hosts that the argument value is required to have one of.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value's host is not specified in <paramref name="hosts" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HostNotIn``1(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,``0,System.Func{System.Net.Mail.MailAddress,System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>Requires the argument value to have none of the specified hosts.</summary>
            <typeparam name="TCollection">The type of the hosts collection.</typeparam>
            <param name="argument">The email address argument.</param>
            <param name="hosts">The hosts that the argument value is required not to have any.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value's host is specified in <paramref name="hosts" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HasDisplayName(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,System.Func{System.Net.Mail.MailAddress,System.String})">
            <summary>Requires the argument value to have a display name specified.</summary>
            <param name="argument">The email address argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not have a display name specified.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotHaveDisplayName(Dawn.Guard.ArgumentInfo{System.Net.Mail.MailAddress}@,System.Func{System.Net.Mail.MailAddress,System.String})">
            <summary>Requires the argument value to not have a display name specified.</summary>
            <param name="argument">The email address argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value has a display name specified.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Defined``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>
                Requires the enum argument to have a value that is a defined member of the enum type <typeparamref name="T" />.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not a defined member of the enum type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Defined``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the enum argument to have a value that is either a defined member of the
                enum type <typeparamref name="T" /> or <c>null</c>.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor a defined member of the
                enum type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HasFlag``1(Dawn.Guard.ArgumentInfo{``0}@,``0,System.Func{``0,``0,System.String})">
            <summary>
                Requires the enum argument to have a value that has the specified flag bits set.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not have the bits specified in
                <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.HasFlag``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0,System.Func{``0,``0,System.String})">
            <summary>
                Requires the enum argument to have a value that either has the specified flag bits
                set or is <c>null</c>.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not have the bits
                specified in <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotHaveFlag``1(Dawn.Guard.ArgumentInfo{``0}@,``0,System.Func{``0,``0,System.String})">
            <summary>
                Requires the enum argument to have a value that has the specified flag bits unset.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value has one or more of the bits specified in
                <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotHaveFlag``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0,System.Func{``0,``0,System.String})">
            <summary>
                Requires the enum argument to have a value that either has the specified flag bits
                unset or is <c>null</c>.
            </summary>
            <param name="argument">The enum argument.</param>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and has one or more of the bits
                specified in <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="T:Dawn.Guard.EnumInfo`1">
            <summary>
                Provides a compiled flag comparer and cached values of the enum type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
        </member>
        <member name="F:Dawn.Guard.EnumInfo`1.HasFlag">
            <summary>Checks whether an enum value has the specified flag bits set.</summary>
        </member>
        <member name="F:Dawn.Guard.EnumInfo`1.Values">
            <summary>Contains all the enum values defined for type <typeparamref name="T" /></summary>
        </member>
        <member name="M:Dawn.Guard.EnumInfo`1.InitHasFlag">
            <summary>Initializes <see cref="F:Dawn.Guard.EnumInfo`1.HasFlag" />.</summary>
            <returns>
                A function that checks whether an enum value has the specified flag bits set.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Enum``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Exposes the enum preconditions.</summary>
            <typeparam name="T">Type of the enum argument.</typeparam>
            <param name="argument">The enum argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                argument type is not an enum.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.EnumArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T" /> is not an enum.</exception>
        </member>
        <member name="M:Dawn.Guard.Enum``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>Exposes the nullable enum preconditions.</summary>
            <typeparam name="T">Type of the enum argument.</typeparam>
            <param name="argument">The enum argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                argument type is not an enum.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.NullableEnumArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="T" /> is not an enum.</exception>
        </member>
        <member name="T:Dawn.Guard.EnumArgumentInfo`1">
            <summary>Represents a method argument with an enumeration value.</summary>
            <typeparam name="T">The type of the enum.</typeparam>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.#ctor(Dawn.Guard.ArgumentInfo{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Dawn.Guard.EnumArgumentInfo`1" /> struct.
            </summary>
            <param name="argument">The original argument.</param>
        </member>
        <member name="P:Dawn.Guard.EnumArgumentInfo`1.Argument">
            <summary>Gets the original argument.</summary>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.op_Implicit(Dawn.Guard.EnumArgumentInfo{`0})~`0">
            <summary>Gets the value of an enum argument.</summary>
            <param name="argument">The argument whose value to return.</param>
            <returns>The value of <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" />.</returns>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.Defined(System.Func{`0,System.String})">
            <summary>
                Requires the enum argument to be a defined member of the enum type <typeparamref name="T" />.
            </summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> value is not a defined member of the enum type <typeparamref name="T" />.
            </exception>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.None(System.Func{`0,System.String})">
            <summary>Requires the enum argument to have none of its bits set.</summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> value has one or more of its bits set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.NotNone(System.Func{`0,System.String})">
            <summary>Requires the enum argument to have at least one of its bits set.</summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> value has none of its bits set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.Equal(`0,System.Func{`0,`0,System.String})">
            <summary>Requires the enum argument to have the specified value.</summary>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> value is different than <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.NotEqual(`0,System.Func{`0,System.String})">
            <summary>
                Requires the enum argument to have a value is different than the specified value.
            </summary>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> value is equal to <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.HasFlag(`0,System.Func{`0,`0,System.String})">
            <summary>Requires the enum argument to have the specified flag bits set.</summary>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> does not have the bits specified in
                <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EnumArgumentInfo`1.DoesNotHaveFlag(`0,System.Func{`0,`0,System.String})">
            <summary>Requires the enum argument to have the specified flag bits unset.</summary>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.EnumArgumentInfo`1.Argument" /> have the bits specified in <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="T:Dawn.Guard.NullableEnumArgumentInfo`1">
            <summary>Represents a method argument with a nullable enumeration value.</summary>
            <typeparam name="T">The type of the enum.</typeparam>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.#ctor(Dawn.Guard.ArgumentInfo{System.Nullable{`0}})">
            <summary>
                Initializes a new instance of the <see cref="T:Dawn.Guard.NullableEnumArgumentInfo`1" /> struct.
            </summary>
            <param name="argument">The original argument.</param>
        </member>
        <member name="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument">
            <summary>Gets the original argument.</summary>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.op_Implicit(Dawn.Guard.NullableEnumArgumentInfo{`0})~System.Nullable{`0}">
            <summary>Gets the value of a nullable enum argument.</summary>
            <param name="argument">The argument whose value to return.</param>
            <returns>The value of <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" />.</returns>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.Null(System.Func{`0,System.String})">
            <summary>Requires the nullable enum argument to be <c>null</c>.</summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c>.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.NotNull(System.String)">
            <summary>Requires the nullable enum argument to be not <c>null</c>.</summary>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentNullException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is <c>null</c> and the argument is not modified
                since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is <c>null</c> and the argument is modified after
                its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.Defined(System.Func{`0,System.String})">
            <summary>
                Requires the nullable enum argument to be either a defined member of the enum
                type <typeparamref name="T" /> or <c>null</c>.
            </summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c> and is not a defined member of
                the enum type <typeparamref name="T" />.
            </exception>
            <returns>The current instance.</returns>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.None(System.Func{`0,System.String})">
            <summary>
                Requires the nullable enum argument to either have none of its bits set or be <c>null</c>.
            </summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c> and has one or more of its bits set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.NotNone(System.Func{`0,System.String})">
            <summary>Requires the enum argument to have at least one of its bits set.</summary>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c> and has none of its bits set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.Equal(`0,System.Func{`0,`0,System.String})">
            <summary>
                Requires the nullable enum argument to either have the specified value or be <c>null</c>.
            </summary>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c> and is different than <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.NotEqual(`0,System.Func{`0,System.String})">
            <summary>
                Requires the nullable enum argument to have a value that is either different than
                the specified value or <c>null</c>.
            </summary>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> value is not <c>null</c> and is equal to <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.HasFlag(`0,System.Func{`0,`0,System.String})">
            <summary>
                Requires the nullable enum argument to either have the specified flag bits set or
                be <c>null</c>.
            </summary>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> is not <c>null</c> and does not have the bits specified
                in <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.DoesNotHaveFlag(`0,System.Func{`0,`0,System.String})">
            <summary>
                Requires the nullable enum argument to either have the specified flag bits unset
                or be <c>null</c>.
            </summary>
            <param name="flag">The flags to check.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>The current instance.</returns>
            <exception cref="T:System.ArgumentException">
                <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> is not <c>null</c> and have the bits specified in
                <paramref name="flag" /> set.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NullableEnumArgumentInfo`1.NotNull(Dawn.Guard.EnumArgumentInfo{`0}@)">
            <summary>
                Initializes an <see cref="T:Dawn.Guard.EnumArgumentInfo`1" /> if the <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" />
                is not <c>null</c>. A return value indicates whether the new argument is created.
            </summary>
            <param name="result">
                The new enum argument, if the <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> is not <c>null</c>;
                otherwise, the uninitialized argument.
            </param>
            <returns>
                <c>true</c>, if the <see cref="P:Dawn.Guard.NullableEnumArgumentInfo`1.Argument" /> is not <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Default``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have the default value of type <typeparamref name="T" />.</summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> does not have the default value of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Default``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that is either the default value of
                type <typeparamref name="T" /> or <c>null</c>.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither the default value of type
                <typeparamref name="T" /> nor <c>null</c>.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotDefault``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a value that is not the default value of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> have the default value of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotDefault``1(Dawn.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>
                Requires the argument to have a value that is not the default value of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> have the default value of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotDefault``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.String)">
            <summary>
                Requires the nullable argument to have a value that is not the default value of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> have the default value of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,``0,System.String})">
            <summary>Requires the argument to have the specified value.</summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different than <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,``0,System.String})">
            <summary>Requires the argument to have the specified value.</summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different than <paramref name="other" /> by the
                comparison made by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a value that is different than the specified value.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a value that is different than the specified value.
            </summary>
            <typeparam name="T">The type of the equatable argument.</typeparam>
            <param name="argument">The equatable argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> by the
                comparison made by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Same``1(Dawn.Guard.ArgumentInfo{``0}@,System.Object,System.Func{``0,System.Object,System.String})">
            <summary>Requires the argument to have the same reference as the specified object.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="other">The object to compare the argument's reference to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value has a different reference than different than <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotSame``1(Dawn.Guard.ArgumentInfo{``0}@,System.Object,System.Func{``0,System.Object,System.String})">
            <summary>
                Requires the argument to have a different reference than the specified object.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="other">The object to compare the argument's reference to.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value has the same reference as <paramref name="other" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Min``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the argument to have a value that is equal to or greater than a specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="minValue">The minimum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than <paramref name="minValue" /> and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than <paramref name="minValue" /> and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Min``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the nullable argument to have a value that is <c>null</c>, equal to the
                specified value, or greater than the specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="minValue">The minimum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than <paramref name="minValue" /> and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than <paramref name="minValue" /> and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.GreaterThan``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the argument to have a value that is greater than a specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="other">The value that the argument must be greater than.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than or equal to
                <paramref name="other" /> and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than or equal to
                <paramref name="other" /> and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.GreaterThan``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the nullable argument to have a value that is <c>null</c> or greater than
                the specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="other">The value that the argument must be greater than.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than or equal to
                <paramref name="other" /> and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than or equal to
                <paramref name="other" /> and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Max``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the argument to have a value that is equal to or lower than a specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="maxValue">The maximum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than <paramref name="maxValue" /> and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than <paramref name="maxValue" /> and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Max``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the nullable argument to have a value that is <c>null</c>, equal to the
                specified value, or lower than the specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="maxValue">The maximum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than <paramref name="maxValue" /> and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than <paramref name="maxValue" /> and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.LessThan``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the argument to have a value that is less than a specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="other">The value that the argument must be less than.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than or equal to
                <paramref name="other" /> and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than or equal to
                <paramref name="other" /> and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.LessThan``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0@,System.Func{``0,``0,System.String})">
            <summary>
                Requires the nullable argument to have a value that is <c>null</c> or less than
                the specified value.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="other">The value that the argument must be less than.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than or equal to
                <paramref name="other" /> and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than or equal to
                <paramref name="other" /> and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.InRange``1(Dawn.Guard.ArgumentInfo{``0}@,``0@,``0@,System.Func{``0,``0,``0,System.String})">
            <summary>
                Requires the argument to have a value that is between the specified minimum and
                maximum values.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="minValue">The minimum value that the argument is allowed to have.</param>
            <param name="maxValue">The maximum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not between <paramref name="minValue" /> and
                <paramref name="maxValue" />. And the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not between <paramref name="minValue" /> and
                <paramref name="maxValue" />. And the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.InRange``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,``0@,``0@,System.Func{``0,``0,``0,System.String})">
            <summary>
                Requires the nullable argument to have a value that is either between the specified
                minimum and maximum values or <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="minValue">The minimum value that the argument is allowed to have.</param>
            <param name="maxValue">The maximum value that the argument is allowed to have.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <c>null</c> and is not between
                <paramref name="minValue" /> and <paramref name="maxValue" />. And the argument is
                not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and is not between
                <paramref name="minValue" /> and <paramref name="maxValue" />. And the argument is
                modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Zero``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument value to be zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not zero and the argument is not modified since
                it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not zero and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Zero``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that is either zero or <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not zero and the argument is not modified since
                it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not zero and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotZero``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a value that is not zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotZero``1(Dawn.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>Requires the argument to have a value that is not zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotZero``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that either is not zero or is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotZero``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.String)">
            <summary>
                Requires the nullable argument to have a value that either is not zero or is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.Positive``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a value that is greater than zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero or less, and the argument is not modified
                since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero or less, and the argument is modified
                after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Positive``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the argument to have a value that is either greater than zero or <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero or less, and the argument is not modified
                since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero or less, and the argument is modified
                after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotPositive``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a value that is not greater than zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than zero, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than zero, and the argument is modified
                after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotPositive``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that is not greater than zero.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is greater than zero, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is greater than zero, and the argument is modified
                after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.Negative``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a value that is less than zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero or greater, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero or greater, and the argument is modified
                after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Negative``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that is either less than zero or <c>null</c>.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is zero or greater, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is zero or greater, and the argument is modified
                after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNegative``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a value that is not less than zero.</summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than zero, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than zero, and the argument is modified
                after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNegative``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>
                Requires the nullable argument to have a value that is not less than zero.
            </summary>
            <typeparam name="T">The type of the comparable argument.</typeparam>
            <param name="argument">The comparable argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is less than zero, and the argument is not
                modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is less than zero, and the argument is modified
                after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.Empty``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a collection value that is empty.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> has one or more items.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEmpty``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to have a collection value that is not empty.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> is not <c>null</c> and has no items.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Count``1(Dawn.Guard.ArgumentInfo{``0}@,System.Int32,System.Func{``0,System.Int32,System.String})">
            <summary>
                Requires the argument to have a collection value that consists of specified number of items.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="count">
                The exact number of items that the argument value is required to have.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not have the exact
                number of items specified in <paramref name="count" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotCount``1(Dawn.Guard.ArgumentInfo{``0}@,System.Int32,System.Func{``0,System.Int32,System.String})">
            <summary>
                Requires the argument to have a collection value that does not consist of specified
                number of items.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="count">
                The exact number of items that the argument value is required not to have.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and has the exact number of
                items specified in <paramref name="count" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.MinCount``1(Dawn.Guard.ArgumentInfo{``0}@,System.Int32,System.Func{``0,System.Int32,System.String})">
            <summary>
                Requires the argument to have a collection value that contains at least the specified
                number of items.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="minCount">
                The minimum number of items that the argument value is allowed to contain.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> contains less than the specified number of items.
            </exception>
        </member>
        <member name="M:Dawn.Guard.MaxCount``1(Dawn.Guard.ArgumentInfo{``0}@,System.Int32,System.Func{``0,System.Int32,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain more than the
                specified number of items.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="maxCount">
                The maximum number of items that the argument value is allowed to contain.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> contains more than the specified number of items.
            </exception>
        </member>
        <member name="M:Dawn.Guard.CountInRange``1(Dawn.Guard.ArgumentInfo{``0}@,System.Int32,System.Int32,System.Func{``0,System.Int32,System.Int32,System.String})">
            <summary>
                Requires the argument to have a collection value whose number of items is between the
                specified minimum and maximum values.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="minCount">
                The minimum number of items that the argument value is allowed to contain.
            </param>
            <param name="maxCount">
                The maximum number of items that the argument value is allowed to contain.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                The number of items that the <paramref name="argument" /> value contains is either
                less than <paramref name="minCount" /> or greater than <paramref name="maxCount" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Contains``2(Dawn.Guard.ArgumentInfo{``0}@,``1@,System.Func{``0,``1,System.String})">
            <summary>
                Requires the argument to have a collection value that contains the specified item.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the collection items.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="item">The item that the argument value is required to contain.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> does not contain <paramref name="item" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Contains``2(Dawn.Guard.ArgumentInfo{``0}@,``1@,System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,``1,System.String})">
            <summary>
                Requires the argument to have a collection value that contains the specified item.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the collection items.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="item">The item that the argument value is required to contain.</param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> does not contain <paramref name="item" /> by the
                comparison made by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotContain``2(Dawn.Guard.ArgumentInfo{``0}@,``1@,System.Func{``0,``1,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain the specified item.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the collection items.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="item">The item that the argument value is required not to contain.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> contains <paramref name="item" />.</exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotContain``2(Dawn.Guard.ArgumentInfo{``0}@,``1@,System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,``1,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain the specified item.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the collection items.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="item">The item that the argument value is required not to contain.</param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> contains <paramref name="item" /> by the comparison made
                by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.ContainsNull``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a collection value that contains a <c>null</c> element.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> does not contain <c>null</c>.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotContainNull``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain a <c>null</c> element.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> contains <c>null</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotContainDuplicate``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.Object,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain duplicate elements.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> contains duplicate elements.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotContainDuplicate``2(Dawn.Guard.ArgumentInfo{``0}@,System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,System.Object,System.String})">
            <summary>
                Requires the argument to have a collection value that does not contain duplicate elements.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the collection items.</typeparam>
            <param name="argument">The collection argument.</param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> contains duplicate elements by the comparison made by
                <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.In``2(Dawn.Guard.ArgumentInfo{``1}@,``0,System.Func{``1,``0,System.String})">
            <summary>Requires the specified collection to contain the argument value.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="collection">
                The collection that is required to contain the argument value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="collection" /> does not contain the <paramref name="argument" /> value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.In``2(Dawn.Guard.ArgumentInfo{``1}@,``0,System.Collections.Generic.IEqualityComparer{``1},System.Func{``1,``0,System.String})">
            <summary>Requires the specified collection to contain the argument value.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="collection">
                The collection that is required to contain the argument value.
            </param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="collection" /> does not contain the <paramref name="argument" />
                value by the comparison made by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.In``1(Dawn.Guard.ArgumentInfo{``0}@,``0[])">
            <summary>Requires the specified items to contain the argument value.</summary>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="items">The items that is required to contain the argument value.</param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="items" /> does not contain the <paramref name="argument" /> value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotIn``2(Dawn.Guard.ArgumentInfo{``1}@,``0,System.Func{``1,``0,System.String})">
            <summary>Requires the specified collection not to contain the argument value.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="collection">
                The collection that is required not to contain the argument value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="collection" /> contains the <paramref name="argument" /> value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotIn``2(Dawn.Guard.ArgumentInfo{``1}@,``0,System.Collections.Generic.IEqualityComparer{``1},System.Func{``1,``0,System.String})">
            <summary>Requires the specified collection not to contain the argument value.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="collection">
                The collection that is required not to contain the argument value.
            </param>
            <param name="comparer">The equality comparer to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="collection" /> contains the <paramref name="argument" /> value by the
                comparison made by <paramref name="comparer" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotIn``1(Dawn.Guard.ArgumentInfo{``0}@,``0[])">
            <summary>Requires the specified items not to contain the argument value.</summary>
            <typeparam name="TItem">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="items">The items that is required not to contain the argument value.</param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="items" /> contains the <paramref name="argument" /> value.
            </exception>
        </member>
        <member name="T:Dawn.Guard.Collection">
            <summary>Provides cached, non-generic collection utilities.</summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedCountFunctions">
            <summary>
                The <see cref="F:Dawn.Guard.Collection`1.Count" /> delegates cached by their
                collection types.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedCountFunctionsLocker">
            <summary>The locker that synchronizes access to <see cref="F:Dawn.Guard.Collection.CachedCountFunctions" />.</summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedContainsNullFunctions">
            <summary>
                The <see cref="F:Dawn.Guard.Collection`1.ContainsNull" /> delegates cached by their
                collection types.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedContainsNullFunctionsLocker">
            <summary>The locker that synchronizes access to <see cref="F:Dawn.Guard.Collection.CachedContainsNullFunctions" />.</summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedContainsFunctions">
            <summary>
                The <see cref="F:Dawn.Guard.Collection`1.Typed`1.Contains" /> delegates cached
                by their collection and item types.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Collection.CachedContainsFunctionsLocker">
            <summary>The locker that synchronizes access to <see cref="F:Dawn.Guard.Collection.CachedContainsFunctions" />.</summary>
        </member>
        <member name="T:Dawn.Guard.Collection`1">
            <summary>Provides cached collection utilities for the type <typeparamref name="TCollection" />.</summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
        </member>
        <member name="F:Dawn.Guard.Collection`1.Count">
            <summary>
                A function that returns the number of elements in the specified collection. It
                enumerates the collection and counts the elements if the collection does not
                provide a Count/Length property. The integer parameter specifies the maximum
                number of iterations.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Collection`1.ContainsNull">
            <summary>
                A function that returns a value that indicates whether the specified collection
                contains a <c>null</c> element. It enumerates the collection and checks the
                elements one by one if the collection does not provide a Contains method that
                accepts a single, nullable argument.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Collection`1.ContainsDuplicate">
            <summary>
                A function that returns a value that indicates whether the specified collection
                contains duplicate elements. It checks for reference equality if the collection
                does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Collection`1.InitCount">
            <summary>Initializes <see cref="F:Dawn.Guard.Collection`1.Count" />.</summary>
            <returns>
                A function that returns the number of elements in the specified collection.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Collection`1.GetCountGetter">
            <summary>
                Returns the getter of Count or Length property of <typeparamref name="TCollection" />.
            </summary>
            <returns>
                The getter of Count or Length property of <typeparamref name="TCollection" />,
                if exists; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Collection`1.InitContainsNull">
            <summary>Initializes <see cref="F:Dawn.Guard.Collection`1.ContainsNull" />.</summary>
            <returns>
                A function that returns a value that indicates whether the specified collection
                contains a <c>null</c> element.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Collection`1.InitContainsDuplicate">
            <summary>Initializes <see cref="F:Dawn.Guard.Collection`1.ContainsDuplicate" />.</summary>
            <returns>
                A function that returns a value that indicates whether the specified collection
                contains duplicate elements.
            </returns>
        </member>
        <member name="M:Dawn.Guard.Collection`1.GetItemType">
            <summary>Returns the item type of a generic <typeparamref name="TCollection" />.</summary>
            <returns>
                The item type of <typeparamref name="TCollection" />, if it implements
                <see cref="T:System.Collections.Generic.IEnumerable`1" />; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:Dawn.Guard.Collection`1.Typed`1">
            <summary>
                Provides cached collection utilities for collections that contain instances of <typeparamref name="TItem" />.
            </summary>
            <typeparam name="TItem">The type of the collection items.</typeparam>
        </member>
        <member name="F:Dawn.Guard.Collection`1.Typed`1.Contains">
            <summary>
                A function that determines whether a generic collection contains the
                specified element.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Collection`1.Typed`1.InitContains">
            <summary>Initializes <see cref="F:Dawn.Guard.Collection`1.Typed`1.Contains" />.</summary>
            <returns>
                A function that determines whether a generic collection contains the
                specified element.
            </returns>
        </member>
        <member name="M:Dawn.Guard.IsValueType(System.Type)">
            <summary>Determines whether the specified type is a value type.</summary>
            <param name="type">The type to check.</param>
            <returns>
                <c>true</c>, if <paramref name="type" /> represents a value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.IsGenericType(System.Type,System.Type)">
            <summary>Determines whether the specified type is a generic type.</summary>
            <param name="type">The type to check.</param>
            <param name="definition">The type definition.</param>
            <returns>
                <c>true</c>, if <paramref name="type" /> represents a generic type with the specified
                definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.IsEnum(System.Type)">
            <summary>Determines whether the specified type is an enum.</summary>
            <param name="type">The type to check.</param>
            <returns>
                <c>true</c>, if <paramref name="type" /> represents an enumeration; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.GetBaseType(System.Type)">
            <summary>Returns the type from which the specified type directly inherits.</summary>
            <param name="type">The type whose base type to return.</param>
            <returns>
                The type from which the <paramref name="type" /> directly inherits, if there is one;
                otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.GetPropertyGetter(System.Type,System.String)">
            <summary>Returns the getter of the property with the specified name.</summary>
            <param name="type">The type that the property belongs to.</param>
            <param name="name">The name of the property.</param>
            <returns>
                The getter of the property with the specified name, if it can be found in
                <paramref name="type" />; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="T:Dawn.Guard.Array`1">
            <summary>Provides a cached, empty array.</summary>
            <typeparam name="T">The type of the array.</typeparam>
        </member>
        <member name="P:Dawn.Guard.Array`1.Empty">
            <summary>Gets an empty array.</summary>
        </member>
        <member name="M:Dawn.Guard.Member``2(Dawn.Guard.ArgumentInfo{``0}@,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{Dawn.Guard.ArgumentInfo{``1}},System.Func{``0,``1,System.Exception,System.String})">
            <summary>Requires a member of the argument to satisfy specified preconditions.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member to validate.</typeparam>
            <param name="argument">The argument.</param>
            <param name="member">An expression that specifies the argument member to validate.</param>
            <param name="validation">The function to test the argument member against.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="member" /> is not composed of <see cref="T:System.Linq.Expressions.MemberExpression" /> s,
                member value cannot be retrieved using the compiled member expression, or
                <paramref name="validation" /> has thrown an exception.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Member``2(Dawn.Guard.ArgumentInfo{``0}@,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{Dawn.Guard.ArgumentInfo{``1}},System.Boolean,System.Func{``0,``1,System.Exception,System.String})">
            <summary>Requires a member of the argument to satisfy specified preconditions.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member to validate.</typeparam>
            <param name="argument">The argument.</param>
            <param name="member">An expression that specifies the argument member to validate.</param>
            <param name="validation">The function to test the argument member against.</param>
            <param name="validatesRange">
                Pass <c>true</c> to throw an <see cref="T:System.ArgumentOutOfRangeException" /> instead of an
                <see cref="T:System.ArgumentException" /> if the precondition is not satisfied.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="member" /> is not composed of <see cref="T:System.Linq.Expressions.MemberExpression" /> s,
                member value cannot be retrieved using the compiled member expression, or
                <paramref name="validation" /> has thrown an exception when
                <paramref name="validatesRange" /> passed <c>false</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="validation" /> has thrown an exception when
                <paramref name="validatesRange" /> passed <c>true</c>.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Member``2(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{Dawn.Guard.ArgumentInfo{``1}},System.Func{``0,``1,System.Exception,System.String})">
            <summary>Requires a member of the argument to satisfy specified preconditions.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member to validate.</typeparam>
            <param name="argument">The argument.</param>
            <param name="member">An expression that specifies the argument member to validate.</param>
            <param name="validation">The function to test the argument member against.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="member" /> is not composed of <see cref="T:System.Linq.Expressions.MemberExpression" /> s,
                member value cannot be retrieved using the compiled member expression, or
                <paramref name="validation" /> has thrown an exception.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Member``2(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{Dawn.Guard.ArgumentInfo{``1}},System.Boolean,System.Func{``0,``1,System.Exception,System.String})">
            <summary>Requires a member of the argument to satisfy specified preconditions.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member to validate.</typeparam>
            <param name="argument">The argument.</param>
            <param name="member">An expression that specifies the argument member to validate.</param>
            <param name="validation">The function to test the argument member against.</param>
            <param name="validatesRange">
                Pass <c>true</c> to throw an <see cref="T:System.ArgumentOutOfRangeException" /> instead of an
                <see cref="T:System.ArgumentException" /> if the precondition is not satisfied.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="member" /> is not composed of <see cref="T:System.Linq.Expressions.MemberExpression" /> s,
                member value cannot be retrieved using the compiled member expression, or
                <paramref name="validation" /> has thrown an exception when
                <paramref name="validatesRange" /> passed <c>false</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="validation" /> has thrown an exception when
                <paramref name="validatesRange" /> passed <c>true</c>.
            </exception>
        </member>
        <member name="T:Dawn.Guard.ArgumentMemberInfo">
            <summary>Represents an argument member.</summary>
        </member>
        <member name="F:Dawn.Guard.ArgumentMemberInfo.Nodes">
            <summary>Cached root nodes of member trees.</summary>
        </member>
        <member name="F:Dawn.Guard.ArgumentMemberInfo.NodesLock">
            <summary>The lock that synchronizes access to <see cref="F:Dawn.Guard.ArgumentMemberInfo.Nodes" />.</summary>
        </member>
        <member name="M:Dawn.Guard.ArgumentMemberInfo.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Returns the cached argument member for the specified lambda expression.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member.</typeparam>
            <param name="lexp">
                The lambda expression that specifies the argument member to get.
            </param>
            <returns>A cached, generic argument member.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="lexp" /> is not composed of <see cref="T:System.Linq.Expressions.MemberExpression" /> s.
            </exception>
        </member>
        <member name="T:Dawn.Guard.ArgumentMemberInfo.Node">
            <summary>Represents a node in a tree of members.</summary>
        </member>
        <member name="M:Dawn.Guard.ArgumentMemberInfo.Node.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Dawn.Guard.ArgumentMemberInfo.Node" /> class.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentMemberInfo.Node.Owners">
            <summary>Gets the owners of the member that the current node represents.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentMemberInfo.Node.Lock">
            <summary>The lock that synchronizes access to the node.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentMemberInfo.Node.Info">
            <summary>Gets or sets the argument member that the current node represents.</summary>
        </member>
        <member name="T:Dawn.Guard.ArgumentMemberInfo`2">
            <summary>Represents a generic argument member.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <typeparam name="TMember">The type of the argument member.</typeparam>
        </member>
        <member name="M:Dawn.Guard.ArgumentMemberInfo`2.#ctor(System.Linq.Expressions.MemberExpression,System.Func{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Dawn.Guard.ArgumentMemberInfo`2" /> class.
            </summary>
            <param name="mexp">The member expression.</param>
            <param name="getValue">
                A function that returns the member value from the argument it belongs to.
            </param>
        </member>
        <member name="P:Dawn.Guard.ArgumentMemberInfo`2.Name">
            <summary>Gets the member name.</summary>
        </member>
        <member name="P:Dawn.Guard.ArgumentMemberInfo`2.GetValue">
            <summary>
                Gets a function that returns the member value from the argument it belongs to.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Modify``2(Dawn.Guard.ArgumentInfo{``0}@,``1)">
            <summary>Returns a new argument with the same name and the specified value.</summary>
            <typeparam name="TSource">The type of the existing argument.</typeparam>
            <typeparam name="TTarget">The type of the new argument.</typeparam>
            <param name="argument">The existing argument.</param>
            <param name="value">The new argument value.</param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
        </member>
        <member name="M:Dawn.Guard.Modify``2(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,``1})">
            <summary>
                Returns a new argument with the same name and a value that is created using the
                specified conversion function.
            </summary>
            <typeparam name="TSource">The type of the existing argument.</typeparam>
            <typeparam name="TTarget">The type of the new argument.</typeparam>
            <param name="argument">The existing argument.</param>
            <param name="convert">
                A function that accepts the existing argument's value and returns a new object to be
                used as the new argument's value.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="convert" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.Wrap``2(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,``1},System.Func{``0,System.String})">
            <summary>
                <para>
                    Returns a new argument with the same name and a value that is created using the
                    specified conversion function.
                </para>
                <para>
                    If the conversion function throws an exception, it will be wrapped in an <see cref="T:System.ArgumentException" />.
                </para>
            </summary>
            <typeparam name="TSource">The type of the existing argument.</typeparam>
            <typeparam name="TTarget">The type of the new argument.</typeparam>
            <param name="argument">The existing argument.</param>
            <param name="convert">
                A function that accepts the existing argument's value and returns a new object to be
                used as the new argument's value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                conversion function fails.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="convert" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="convert" /> threw an exception.</exception>
        </member>
        <member name="M:Dawn.Guard.Clone``1(Dawn.Guard.ArgumentInfo{``0}@)">
            <summary>
                Returns a new argument with the same name and a shallow clone of the original value.
            </summary>
            <typeparam name="T">The type of the cloneable argument.</typeparam>
            <param name="argument">The cloneable argument.</param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
        </member>
        <member name="M:Dawn.Guard.Null``1(Dawn.Guard.ArgumentInfo{``0}@,System.Func{``0,System.String})">
            <summary>Requires the argument to be <c>null</c>.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> is not <c>null</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.Null``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.Func{System.Nullable{``0},System.String})">
            <summary>Requires the nullable argument to be <c>null</c>.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="argument" /> is not <c>null</c>.</exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNull``1(Dawn.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>Requires the argument not to be <c>null</c>.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="argument" /> value is <c>null</c> and the argument is not modified
                since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <c>null</c> and the argument is modified after
                its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNull``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,System.String)">
            <summary>Requires the nullable argument not to be <c>null</c>.</summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="argument" /> value is <c>null</c> and the argument is not modified
                since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <c>null</c> and the argument is modified after
                its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNull``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@,Dawn.Guard.ArgumentInfo{``0}@)">
            <summary>
                Initializes a new <see cref="T:Dawn.Guard.ArgumentInfo`1" /> if the argument value is not
                <c>null</c>. A return value indicates whether the new argument is created.
            </summary>
            <param name="argument">The argument.</param>
            <param name="result">
                The new argument, if <paramref name="argument" /> is not <c>null</c>; otherwise, the
                uninitialized argument.
            </param>
            <returns>
                <c>true</c>, if the <paramref name="argument" /> is not <c>null</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dawn.Guard.NotAllNull``2(Dawn.Guard.ArgumentInfo{``0}@,Dawn.Guard.ArgumentInfo{``1}@,System.String)">
            <summary>Requires at least one of the specified arguments not to be <c>null</c>.</summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <exception cref="T:System.ArgumentNullException">
                None of the specified arguments have value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotAllNull``3(Dawn.Guard.ArgumentInfo{``0}@,Dawn.Guard.ArgumentInfo{``1}@,Dawn.Guard.ArgumentInfo{``2}@,System.String)">
            <summary>Requires at least one of the specified arguments not to be <c>null</c>.</summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="argument1">The first argument.</param>
            <param name="argument2">The second argument.</param>
            <param name="argument3">The third argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <exception cref="T:System.ArgumentNullException">
                None of the specified arguments have value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.GetValueOrDefault``1(Dawn.Guard.ArgumentInfo{System.Nullable{``0}}@)">
            <summary>
                Retrieves the value of a nullable argument, or the default value of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="argument">The argument.</param>
            <returns>
                The inner value of the nullable argument's value, if
                <see cref="M:Dawn.Guard.ArgumentInfo`1.HasValue" /> returns <c>true</c>; otherwise, the default
                value of <typeparamref name="T" />.
            </returns>
        </member>
        <member name="T:Dawn.Guard.Exception`1">
            <summary>
                Initializes exceptions of type <typeparamref name="T" /> for failed preconditions.
            </summary>
            <typeparam name="T">The exception type.</typeparam>
        </member>
        <member name="F:Dawn.Guard.Exception`1.Factory">
            <summary>
                Initializes an exception of type <typeparamref name="T" /> using the specified
                parameter name and error message.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Exception`1.InitFactory">
            <summary>Initializes <see cref="F:Dawn.Guard.Exception`1.Factory" />.</summary>
            <returns>A function that initializes exceptions.</returns>
        </member>
        <member name="M:Dawn.Guard.BeginScope(System.Action{System.Exception,System.Diagnostics.StackTrace},System.Boolean)">
            <summary>Starts a guarding scope using the specified exception interceptor.</summary>
            <param name="exceptionInterceptor">
                A delegate to intercept the exceptions caused by failed validations along with their
                full stack trace.
            </param>
            <param name="propagates">
                Pass <c>true</c> for the exceptions to bubble up to parent interceptors; pass
                <c>false</c> to disable propagation.
            </param>
            <returns>An object that when disposed, will end the guarding scope.</returns>
        </member>
        <member name="T:Dawn.Guard.Scope">
            <summary>Represents a guarding scope.</summary>
        </member>
        <member name="F:Dawn.Guard.Scope.Local">
            <summary>
                The scope data that is local to the calling asynchronous control flow.
            </summary>
        </member>
        <member name="F:Dawn.Guard.Scope._disposed">
            <summary>
                Contains zero if the instance is not disposed; and one if it is disposed.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Scope.#ctor(System.Action{System.Exception,System.Diagnostics.StackTrace},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Dawn.Guard.Scope" /> class.</summary>
            <param name="exceptionInterceptor">
                A delegate to intercept the exceptions caused by failed validations along with
                their full stack trace.
            </param>
            <param name="propagates">
                A value indicating whether the scope should bubble up to parent scopes.
            </param>
        </member>
        <member name="P:Dawn.Guard.Scope.Parent">
            <summary>Gets the previous scope to restore when the current one is disposed.</summary>
        </member>
        <member name="P:Dawn.Guard.Scope.Current">
            <summary>Gets the current guarding scope.</summary>
        </member>
        <member name="P:Dawn.Guard.Scope.ExceptionInterceptor">
            <summary>
                Gets a delegate to intercept the exceptions caused by failed validations along
                with their full stack trace.
            </summary>
        </member>
        <member name="P:Dawn.Guard.Scope.Propagates">
            <summary>
                Gets a value indicating whether the scope should bubble up to parent scopes.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Scope.Dispose">
            <summary>Ends the guarding scope.</summary>
        </member>
        <member name="T:Dawn.Guard.Disposable">
            <summary>Provides helpers to create disposables.</summary>
        </member>
        <member name="P:Dawn.Guard.Disposable.Empty">
            <summary>Gets an instance that does nothing when disposed.</summary>
        </member>
        <member name="T:Dawn.Guard.Disposable.EmptyDisposable">
            <summary>
                An <see cref="T:System.IDisposable" /> implementation that does nothing when disposed.
            </summary>
        </member>
        <member name="M:Dawn.Guard.Disposable.EmptyDisposable.Dispose">
            <summary>Does nothing.</summary>
        </member>
        <member name="M:Dawn.Guard.NaN(Dawn.Guard.ArgumentInfo{System.Single}@,System.Func{System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is "not a
                number" (<see cref="F:System.Single.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.NaN" />, and the argument
                is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.NaN" />, and the argument
                is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NaN(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Func{System.Nullable{System.Single},System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is either
                <c>null</c> or "not a number" ( <see cref="F:System.Single.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.NaN" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.NaN" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNaN(Dawn.Guard.ArgumentInfo{System.Single}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                "not a number" ( <see cref="F:System.Single.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NaN" />, and the argument is
                not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NaN" />, and the argument is
                modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNaN(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                "not a number" ( <see cref="F:System.Single.NaN" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NaN" />, and the argument is
                not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NaN" />, and the argument is
                modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Infinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.Func{System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is either
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) or negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <see cref="F:System.Single.PositiveInfinity" />
                nor <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it
                is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <see cref="F:System.Single.PositiveInfinity" />
                nor <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Infinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Func{System.Nullable{System.Single},System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is
                <c>null</c>, positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) or negative
                infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <c>null</c>, not
                <see cref="F:System.Single.PositiveInfinity" /> and not <see cref="F:System.Single.NegativeInfinity" />,
                and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c>, not
                <see cref="F:System.Single.PositiveInfinity" /> and not <see cref="F:System.Single.NegativeInfinity" />,
                and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.Func{System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Func{System.Nullable{System.Single},System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is neither
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />) nor negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is either <see cref="F:System.Single.PositiveInfinity" /> or
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.PositiveInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.Func{System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.PositiveInfinity" />, and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.PositiveInfinity" />, and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.PositiveInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Func{System.Nullable{System.Single},System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is either
                <c>null</c> or positive infinity ( <see cref="F:System.Single.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.PositiveInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.PositiveInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotPositiveInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.PositiveInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.PositiveInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotPositiveInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                positive infinity ( <see cref="F:System.Single.PositiveInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.PositiveInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.PositiveInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NegativeInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.Func{System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is
                negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.NegativeInfinity" />, and
                the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <see cref="F:System.Single.NegativeInfinity" />, and
                the argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NegativeInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Func{System.Nullable{System.Single},System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is either
                <c>null</c> or negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor
                <see cref="F:System.Single.NegativeInfinity" />, and the argument is modified after its initialization.
            </exception>
            <remarks>
                The argument value that is passed to <paramref name="message" /> cannot be
                <c>null</c>, but it is defined as nullable anyway. This is because passing a lambda
                would cause the calls to be ambiguous between this method and its overload when the
                message delegate accepts a non-nullable argument.
            </remarks>
        </member>
        <member name="M:Dawn.Guard.NotNegativeInfinity(Dawn.Guard.ArgumentInfo{System.Single}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NegativeInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NegativeInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotNegativeInfinity(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.String)">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                negative infinity ( <see cref="F:System.Single.NegativeInfinity" />).
            </summary>
            <param name="argument">The argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NegativeInfinity" />, and the
                argument is not modified since it is initialized.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is <see cref="F:System.Single.NegativeInfinity" />, and the
                argument is modified after its initialization.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal(Dawn.Guard.ArgumentInfo{System.Single}@,System.Single,System.Single,System.Func{System.Single,System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is within
                the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required accuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different from <paramref name="other" /> by
                more than <paramref name="delta" />
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Single,System.Single,System.Func{System.Single,System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is either
                <c>null</c>, or within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required accuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is different from <paramref name="other" /> by
                more than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual(Dawn.Guard.ArgumentInfo{System.Single}@,System.Single,System.Single,System.Func{System.Single,System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that is not
                within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required inaccuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> or different
                from it by less than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual(Dawn.Guard.ArgumentInfo{System.Nullable{System.Single}}@,System.Single,System.Single,System.Func{System.Single,System.Single,System.String})">
            <summary>
                Requires the single-precision floating-point argument to have a value that either is
                <c>null</c> or is not within the specified accuracy of the specified value.
            </summary>
            <param name="argument">The argument.</param>
            <param name="other">The value to compare the argument value to.</param>
            <param name="delta">The required inaccuracy.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> or different
                from it by less than <paramref name="delta" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Operation(System.Boolean,System.String,System.String)">
            <summary>
                Requires a method call to be valid for the current state of the instance it belongs to.
            </summary>
            <param name="valid">Whether the method call is valid.</param>
            <param name="message">
                The message of the exception that will be thrown if the call is invalid.
            </param>
            <param name="caller">The name of the invoked method.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="valid" /> is <c>false</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.Support(System.Boolean,System.String,System.String)">
            <summary>Requires a method to be supported by the instance it belongs to.</summary>
            <param name="supported">Whether the invoked method is supported.</param>
            <param name="message">
                The message of the exception that will be thrown if the method is not supported.
            </param>
            <param name="caller">The name of the invoked method.</param>
            <exception cref="T:System.NotSupportedException"><paramref name="supported" /> is <c>false</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.Disposal(System.Boolean,System.String,System.String)">
            <summary>Requires an instance not to be disposed.</summary>
            <param name="disposed">
                Whether the instance that the invoked method belongs to is disposed.
            </param>
            <param name="objectName">The name of the instance that may be disposed.</param>
            <param name="message">
                The message of the exception that will be thrown if the instance that the invoked
                method belongs to is disposed.
            </param>
            <exception cref="T:System.ObjectDisposedException"><paramref name="disposed" /> is <c>true</c>.</exception>
        </member>
        <member name="M:Dawn.Guard.Empty(Dawn.Guard.ArgumentInfo{System.String}@,System.Func{System.String,System.String})">
            <summary>Requires the argument to have an empty string value.</summary>
            <param name="argument">The string argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains one or more characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEmpty(Dawn.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>Requires the argument to have a non-empty string value.</summary>
            <param name="argument">The string argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not contain any characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.WhiteSpace(Dawn.Guard.ArgumentInfo{System.String}@,System.Func{System.String,System.String})">
            <summary>
                Requires the argument to have a string value that consists only of white-space characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains one or more
                characters that are not white-space.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotWhiteSpace(Dawn.Guard.ArgumentInfo{System.String}@,System.Func{System.String,System.String})">
            <summary>
                Requires the argument to have a string value that does not consist only of
                white-space characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains only of
                white-space characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotWhiteSpace(Dawn.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
                Requires the argument to have a string value that does not consist only of
                white-space characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="message">
                The message of the exception that will be thrown if the precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains only of
                white-space characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Length(Dawn.Guard.ArgumentInfo{System.String}@,System.Int32,System.Func{System.String,System.Int32,System.String})">
            <summary>
                Requires the argument to have a string value that consists of specified number of characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="length">
                The exact number of characters that the argument value is required to have.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not have the exact
                number of characters specified in <paramref name="length" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotLength(Dawn.Guard.ArgumentInfo{System.String}@,System.Int32,System.Func{System.String,System.Int32,System.String})">
            <summary>
                Requires the argument to have a string value that does not consist of specified
                number of characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="length">
                The exact number of characters that the argument value is required not to have.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and has the exact number of
                characters specified in <paramref name="length" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.MinLength(Dawn.Guard.ArgumentInfo{System.String}@,System.Int32,System.Func{System.String,System.Int32,System.String})">
            <summary>
                Requires the argument to have a string value that contains at least the specified
                number of characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="minLength">
                The minimum number of characters allowed in the argument value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains less than the
                specified number of characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.MaxLength(Dawn.Guard.ArgumentInfo{System.String}@,System.Int32,System.Func{System.String,System.Int32,System.String})">
            <summary>
                Requires the argument to have a string value that contains no more than the specified
                number of characters.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="maxLength">
                The maximum number of characters allowed in the argument value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains more than the
                specified number of characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.LengthInRange(Dawn.Guard.ArgumentInfo{System.String}@,System.Int32,System.Int32,System.Func{System.String,System.Int32,System.Int32,System.String})">
            <summary>
                Requires the argument to have a value whose length is between the specified minimum
                and maximum values.
            </summary>
            <param name="argument">The comparable argument.</param>
            <param name="minLength">
                The minimum number of characters allowed in the argument value.
            </param>
            <param name="maxLength">
                The maximum number of characters allowed in the argument value.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and contains either less than
                <paramref name="minLength" /> or more than <paramref name="maxLength" /> number of characters.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Equal(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the string argument to have a value that is equal to another string when
                compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="other">The string to compare the argument value to.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not equal to <paramref name="other" /> by the
                comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotEqual(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String})">
            <summary>
                Requires the string argument to have a value that is different than another string
                when compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="other">The string to compare the argument value to.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is equal to <paramref name="other" /> by the
                comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.StartsWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the beginning of the string argument to match with the specified string.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the beginning of the argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not start with <paramref name="value" /> when
                a case-sensitive and culture-sensitive comparison is performed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.StartsWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the beginning of the string argument to match with the specified string when
                compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the beginning of the argument.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not start with <paramref name="value" /> when
                compared by the comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotStartWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the beginning of the string argument to be different than the specified string.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the beginning of the argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value starts with <paramref name="value" /> when a
                case-sensitive and culture-sensitive comparison is performed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotStartWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the beginning of the string argument to be different than the specified
                string when compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the beginning of the argument.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value starts with <paramref name="value" /> when
                compared by the comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EndsWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the end of the string argument to match with the specified string.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the end of the argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not end with <paramref name="value" /> when a
                case-sensitive and culture-sensitive comparison is performed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.EndsWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the end of the string argument to match with the specified string when
                compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the end of the argument.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value does not end with <paramref name="value" /> when
                compared by the comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotEndWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the end of the string argument to be different than the specified string.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the end of the argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value ends with <paramref name="value" /> when a
                case-sensitive and culture-sensitive comparison is performed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotEndWith(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.StringComparison,System.Func{System.String,System.String,System.String})">
            <summary>
                Requires the end of the string argument to be different than the specified string
                when compared by the specified rules.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="value">The string to search in the end of the argument.</param>
            <param name="comparison">The rules that specify how the strings will be compared.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value ends with <paramref name="value" /> when compared
                by the comparison rules specified in <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Matches(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the specified regular expression to find a match in the string argument.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="pattern">The regular expression pattern to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="pattern" /> cannot be parsed as a regular expression, or the
                resulting expression could not find a match in <paramref name="argument" />'s value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Matches(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.TimeSpan,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the specified regular expression to find a match in the string argument.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="pattern">The regular expression pattern to use.</param>
            <param name="matchTimeout">
                A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that
                the method should not time out.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="pattern" /> cannot be parsed as a regular expression, the resulting
                expression timed out, or it could not find a match in <paramref name="argument" />'s value.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Matches(Dawn.Guard.ArgumentInfo{System.String}@,System.Text.RegularExpressions.Regex,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the specified regular expression to find a match in the string argument.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="regex">The regular expression to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="regex" /> could not find a match in <paramref name="argument" />'s
                value or it timed out before the evaluation is completed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotMatch(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the string argument to not contain a match that can be found by the
                specified regular expression.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="pattern">The regular expression pattern to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="pattern" /> cannot be parsed as a regular expression, or the
                resulting expression found a match in <paramref name="argument" />'s value.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotMatch(Dawn.Guard.ArgumentInfo{System.String}@,System.String,System.TimeSpan,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the string argument to not contain a match that can be found by the
                specified regular expression.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="pattern">The regular expression pattern to use.</param>
            <param name="matchTimeout">
                A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that
                the method should not time out.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="pattern" /> cannot be parsed as a regular expression, the resulting
                expression timed out, or it found a match in <paramref name="argument" />'s value.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.
            </exception>
        </member>
        <member name="M:Dawn.Guard.DoesNotMatch(Dawn.Guard.ArgumentInfo{System.String}@,System.Text.RegularExpressions.Regex,System.Func{System.String,System.Boolean,System.String})">
            <summary>
                Requires the string argument to not contain a match that can be found by the
                specified regular expression.
            </summary>
            <param name="argument">The string argument.</param>
            <param name="regex">The regular expression to use.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied. The boolean argument indicates whether the exception
                is caused because of a time-out.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="regex" /> found a match in <paramref name="argument" />'s value or it
                timed out before the evaluation is completed.
            </exception>
        </member>
        <member name="M:Dawn.Guard.StringEqualityComparer(System.StringComparison)">
            <summary>
                Returns the string comparer that is most relevant to the specified enumeration value.
            </summary>
            <param name="comparison">
                An enumeration value that specifies how to compare two strings.
            </param>
            <returns>A string equality comparer.</returns>
        </member>
        <member name="M:Dawn.Guard.Type``1(Dawn.Guard.ArgumentInfo{System.Object}@,System.Func{System.Object,System.String})">
            <summary>
                Requires the argument to have a value that is an instance of the specified generic type.
            </summary>
            <typeparam name="T">
                The type that the argument's value should be an instance of.
            </typeparam>
            <param name="argument">The object argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns>A new <see cref="T:Dawn.Guard.ArgumentInfo`1" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not an instance of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotType``1(Dawn.Guard.ArgumentInfo{System.Object}@,System.Func{``0,System.String})">
            <summary>
                Requires the argument to have a value that is not an instance of the specified
                generic type.
            </summary>
            <typeparam name="T">
                The type that the argument's value should not be an instance of.
            </typeparam>
            <param name="argument">The argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is an instance of type <typeparamref name="T" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Type(Dawn.Guard.ArgumentInfo{System.Object}@,System.Type,System.Func{System.Object,System.Type,System.String})">
            <summary>
                Requires the argument to have a value that is an instance of the specified type.
            </summary>
            <param name="argument">The object argument.</param>
            <param name="type">The type that the argument's value should be an instance of.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not an instance of the type represented by <paramref name="type" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotType(Dawn.Guard.ArgumentInfo{System.Object}@,System.Type,System.Func{System.Object,System.Type,System.String})">
            <summary>
                Requires the argument to have a value that is not an instance of the specified type.
            </summary>
            <param name="argument">The argument.</param>
            <param name="type">
                The type that the argument's value should not be an instance of.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is an instance of the type represented by <paramref name="type" />.
            </exception>
        </member>
        <member name="T:Dawn.Guard.TypeInfo`1">
            <summary>Provides cached utilities for <typeparamref name="T" />.</summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="F:Dawn.Guard.TypeInfo`1.CanBeInitializedFrom">
            <summary>
                A function that determines whether the specified object can be converted to type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:Dawn.Guard.TypeInfo`1.InitCanBeInitializedFrom">
            <summary>Initializes <see cref="F:Dawn.Guard.TypeInfo`1.CanBeInitializedFrom" />.</summary>
            <returns>
                A function that determines whether the specified object can be converted to type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="T:Dawn.Guard.TypeInfo">
            <summary>Provides non-generic, cached utilities for specified types.</summary>
        </member>
        <member name="F:Dawn.Guard.TypeInfo.Locker">
            <summary>The locker that synchronizes access to <see cref="F:Dawn.Guard.TypeInfo.CanBeConvertedToDict" />.</summary>
        </member>
        <member name="F:Dawn.Guard.TypeInfo.CanBeConvertedToDict">
            <summary>
                The functions that determine whether a specified object can be converted to the
                type that the function is mapped to.
            </summary>
        </member>
        <member name="M:Dawn.Guard.TypeInfo.CanBeConvertedTo(System.Object,System.Type)">
            <summary>
                Determines whether an object can be converted to an instance of the specified type.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="targetType">The type to check.</param>
            <returns>
                <c>true</c>, if <paramref name="obj" /> can be converted to an instance of <paramref name="targetType" />.
            </returns>
            <remarks>Calls <see cref="F:Dawn.Guard.TypeInfo`1.CanBeInitializedFrom" />.</remarks>
        </member>
        <member name="F:Dawn.Guard.HttpUriScheme">
            <summary>The URI scheme for Hypertext Transfer Protocol (HTTP).</summary>
        </member>
        <member name="F:Dawn.Guard.HttpsUriScheme">
            <summary>The URI scheme for Secure Hypertext Transfer Protocol (HTTPS).</summary>
        </member>
        <member name="M:Dawn.Guard.Absolute(Dawn.Guard.ArgumentInfo{System.Uri}@,System.Func{System.Uri,System.String})">
            <summary>Requires the argument value to be an absolute URI.</summary>
            <param name="argument">The URI argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor an absolute URI.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Relative(Dawn.Guard.ArgumentInfo{System.Uri}@,System.Func{System.Uri,System.String})">
            <summary>Requires the argument value to be a relative URI.</summary>
            <param name="argument">The URI argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor a relative URI.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Scheme(Dawn.Guard.ArgumentInfo{System.Uri}@,System.String,System.Func{System.Uri,System.String,System.String})">
            <summary>
                Requires the argument value to be an absolute URI with the specified scheme.
            </summary>
            <param name="argument">The URI argument.</param>
            <param name="scheme">The URI scheme to compare.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is neither <c>null</c> nor an absolute URI with
                the scheme specified by <paramref name="scheme" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.NotScheme(Dawn.Guard.ArgumentInfo{System.Uri}@,System.String,System.Func{System.Uri,System.String,System.String})">
            <summary>Requires the argument value to not have the specified scheme.</summary>
            <param name="argument">The URI argument.</param>
            <param name="scheme">The URI scheme to compare.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is an absolute URI with the scheme specified by <paramref name="scheme" />.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Http(Dawn.Guard.ArgumentInfo{System.Uri}@,System.Func{System.Uri,System.String})">
            <summary>
                Requires the argument value to be an absolute URI with the HTTP or HTTPS scheme.
            </summary>
            <param name="argument">The URI argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and its scheme is neither HTTP
                nor HTTPS.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Http(Dawn.Guard.ArgumentInfo{System.Uri}@,System.Boolean,System.Func{System.Uri,System.String})">
            <summary>
                Requires the argument value to be an absolute URI with the HTTP or HTTPS scheme.
            </summary>
            <param name="argument">The URI argument.</param>
            <param name="allowHttps">
                Pass <c>true</c> to allow both the HTTP and HTTPS schemes or <c>false</c> to allow
                only the HTTP scheme.
            </param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not have one of the
                required schemes.
            </exception>
        </member>
        <member name="M:Dawn.Guard.Https(Dawn.Guard.ArgumentInfo{System.Uri}@,System.Func{System.Uri,System.String})">
            <summary>Requires the argument value to be an absolute URI with the HTTPS scheme.</summary>
            <param name="argument">The URI argument.</param>
            <param name="message">
                The factory to initialize the message of the exception that will be thrown if the
                precondition is not satisfied.
            </param>
            <returns><paramref name="argument" />.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="argument" /> value is not <c>null</c> and does not have the HTTPS scheme.
            </exception>
        </member>
        <member name="T:Dawn.GuardFunctionAttribute">
            <summary>Marks a target as a function of <see cref="T:Dawn.Guard" />.</summary>
        </member>
        <member name="M:Dawn.GuardFunctionAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Dawn.GuardFunctionAttribute" /> class.
            </summary>
            <param name="group">The group that the marked function belongs to.</param>
            <param name="shortcut">The optional shortcut for snippet creation.</param>
            <param name="order">The priority of a function along its overloads.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="group" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="group" /> consist only of white-space characters,
                <paramref name="shortcut" /> does not start with "g", <paramref name="shortcut" />
                does starts with "gx" or <paramref name="shortcut" /> is shorter than two characters.
            </exception>
        </member>
        <member name="P:Dawn.GuardFunctionAttribute.Group">
            <summary>The group that the function belongs to.</summary>
        </member>
        <member name="P:Dawn.GuardFunctionAttribute.Shortcut">
            <summary>The shortcut of the function snippet.</summary>
        </member>
        <member name="P:Dawn.GuardFunctionAttribute.Order">
            <summary>The priority of a function along its overloads.</summary>
        </member>
        <member name="M:Dawn.GuardFunctionAttribute.GetMethods(System.Reflection.Assembly)">
            <summary>
                Gets the exposed methods in the specified assembly that are marked with <see cref="T:Dawn.GuardFunctionAttribute" />
            </summary>
            <param name="assembly">The assembly to search.</param>
            <returns>
                An enumerable of methods and <see cref="T:Dawn.GuardFunctionAttribute" /> instances that
                mark them.
            </returns>
        </member>
        <member name="T:Dawn.NonGuardAttribute">
            <summary>Marks a method as a non-guarding utility.</summary>
            <remarks>Methods with this attribute are ignored by annotation tests.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Required for reference nullability annotations.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> class.</summary>
            <param name="returnValue">If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is an assertion method, i.e. it halts the control flow
                unless a condition is satisfied.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>Describes the relations between the marked method's inputs and outputs.</summary>
            <see href="https://www.jetbrains.com/help/resharper/Contract_Annotations.html" />
        </member>
        <member name="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:JetBrains.Annotations.ContractAnnotationAttribute" /> class.
            </summary>
            <param name="contract">The contract string.</param>
        </member>
        <member name="P:JetBrains.Annotations.ContractAnnotationAttribute.Contract">
            <summary>Gets the contract string.</summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the marked argument should be a string literal and match one of the
                parameters of the method it belongs to.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>Indicates that the value of the marked element could never be <c>null</c>.</summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>Indicates that the marked parameter is a regular expression pattern.</summary>
        </member>
    </members>
</doc>
